AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Outputs:
  WwwURL:
    Description: URL of the bucket used for containing the final website files.
    Value: !GetAtt 
      - WWWBucket1
      - WebsiteURL
  StageBucket:
    Description: Stage bucket ID (copy this!)
    Value: !Ref StageBucket
Mappings:
  RegionMap:
    us-east-2:
      DNSName: s3-website.us-east-2.amazonaws.com
      HostedZoneId: Z2O1EMRO9K5GLX
    us-east-1:
      DNSName: s3-website-us-east-1.amazonaws.com
      HostedZoneId: Z3AQBSTGFYJSTF
    us-west-1:
      DNSName: s3-website-us-west-1.amazonaws.com
      HostedZoneId: Z2F56UZL2M1ACD
    us-west-2:
      DNSName: s3-website-us-west-2.amazonaws.com
      HostedZoneId: Z3BJ6K6RIION7M
    ap-east-1:
      DNSName: s3-website.ap-east-1.amazonaws.com
      HostedZoneId: ZNB98KWMFR0R6
    ap-south-1:
      DNSName: s3-website.ap-south-1.amazonaws.com
      HostedZoneId: Z11RGJOFQNVJUP
    ap-northeast-3:
      DNSName: s3-website.ap-northeast-3.amazonaws.com
      HostedZoneId: Z2YQB5RD63NC85
    ap-northeast-2:
      DNSName: s3-website.ap-northeast-2.amazonaws.com
      HostedZoneId: Z3W03O7B5YMIYP
    ap-southeast-1:
      DNSName: s3-website-ap-southeast-1.amazonaws.com
      HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      DNSName: s3-website-ap-southeast-2.amazonaws.com
      HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      DNSName: s3-website-ap-northeast-1.amazonaws.com
      HostedZoneId: Z2M4EHUR26P7ZW
    ca-central-1:
      DNSName: s3-website.ca-central-1.amazonaws.com
      HostedZoneId: Z1QDHH18159H29
    eu-central-1:
      DNSName: s3-website.eu-central-1.amazonaws.com
      HostedZoneId: Z21DNDUVLTQW6Q
    eu-west-1:
      DNSName: s3-website-eu-west-1.amazonaws.com
      HostedZoneId: Z1BKCTXD74EZPE
    eu-west-2:
      DNSName: 's3-website.eu-west-2.amazonaws.com'
      HostedZoneId: 'Z3GKZC51ZF0DB4'
    eu-west-3:
      DNSName: 's3-website.eu-west-3.amazonaws.com'
      HostedZoneId: 'Z3R1K369G5AVDG'
    eu-north-1:
      DNSName: 's3-website.eu-north-1.amazonaws.com'
      HostedZoneId: 'Z3BAZG2TWCNX0D'
    me-south-1:
      DNSName: 's3-website.me-south-1.amazonaws.com'
      HostedZoneId: 'Z1MPMWCPA7YB62'
    sa-east-1:
      DNSName: 's3-website-sa-east-1.amazonaws.com'
      HostedZoneId: 'Z7KQH4QJS55SO'
      
Resources:
  StageBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt 
              - CreateWWW
              - Arn
            Event: 's3:ObjectCreated:*'
          - Function: !GetAtt
              - CreateWWW
              - Arn
            Event: 's3:ObjectRemoved:*'
      BucketName: !Sub '${SiteName}-stage'
    DependsOn:
      - CreateWWWStageBucketEventPermission
  CreateWWW:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref CreateWWWRubyLayer
      CodeUri: Lambda/.
      Handler: www_function.handler
      MemorySize: 1024
      Environment:
        Variables:
          WWW: !Ref WWWBucket1
          STAGING: !Sub '${SiteName}-stage'
      Role: !GetAtt 
        - CreateWWWRole
        - Arn
      Timeout: 300
      Runtime: ruby2.5
  CreateWWWRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: CreateWWWRolePolicy0
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:GetLifecycleConfiguration'
                  - 's3:PutLifecycleConfiguration'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub 
                    - 'arn:${AWS::Partition}:s3:::${bucketName}'
                    - bucketName: !Sub '${SiteName}-stage'
                  - !Sub 
                    - 'arn:${AWS::Partition}:s3:::${bucketName}/*'
                    - bucketName: !Sub '${SiteName}-stage'
                Effect: Allow
        - PolicyName: CreateWWWRolePolicy1
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                Resource:
                  - !Sub 'arn:aws:s3:::${SiteName}'
                  - !Sub 'arn:aws:s3:::${SiteName}/*'
                  - !Sub 'arn:aws:s3:::www.${SiteName}'
                  - !Sub 'arn:aws:s3:::www.${SiteName}/*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
  WWWBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${SiteName}'
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WWWBucket1'
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource: 
            - !Sub 'arn:aws:s3:::${SiteName}'
            - !Sub 'arn:aws:s3:::${SiteName}/*'
  WWWBucket2:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'www.${SiteName}'
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Sub '${SiteName}'
          Protocol: http
  CreateWWWRubyLayer:
    DeletionPolicy: Retain
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: Layers/Layer.zip
      LayerName: CreateWWWRubyLayer
      CompatibleRuntimes:
        - ruby2.5
  CreateWWWStageBucketEventPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      SourceAccount: !Ref 'AWS::AccountId'
      FunctionName: !Ref CreateWWW
      Principal: s3.amazonaws.com
  StagingUser:
    Type: 'AWS::IAM::User'
    Properties:
      Policies:
        - PolicyName: AllowStagingBucketAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                Effect: Allow
                Resource:
                  - !GetAtt 
                    - StageBucket
                    - Arn
                  - !Sub 'arn:${AWS::Partition}:s3:::${SiteName}-stage/*'
  StagingUserKeys:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      Serial: 1
      Status: Active
      UserName: !Ref StagingUser
  WWWZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Sub '${SiteName}'
  WWWRec1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Sub '${SiteName}'
      Type: A
      HostedZoneName: !Join ['', [!Ref 'SiteName', .]]
      AliasTarget:
        DNSName: !FindInMap
          - RegionMap
          - !Ref "AWS::Region"
          - DNSName
        HostedZoneId: !FindInMap
          - RegionMap
          - !Ref "AWS::Region"
          - HostedZoneId
    DependsOn: WWWZone
  WWWRec2:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Sub 'www.${SiteName}'
      Type: A
      HostedZoneName: !Join ['', [!Ref 'SiteName', .]]
      AliasTarget:
        DNSName: !FindInMap
          - RegionMap
          - !Ref "AWS::Region"
          - DNSName
        HostedZoneId: !FindInMap
          - RegionMap
          - !Ref "AWS::Region"
          - HostedZoneId
    DependsOn: WWWZone
Description: www-publisher stack
Parameters:
  SiteName:
    Type: String
